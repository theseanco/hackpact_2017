{
    "docs": [
        {
            "location": "/", 
            "text": "hackpact_2017\n\n\nA repo of my 'Hackpact', a series of short-duration 'generative makes'", 
            "title": "About This Project"
        }, 
        {
            "location": "/#hackpact_2017", 
            "text": "A repo of my 'Hackpact', a series of short-duration 'generative makes'", 
            "title": "hackpact_2017"
        }, 
        {
            "location": "/ideas/", 
            "text": "A computer that you plug into the ground and it writes the rules for L-systems which make beautiful music.\n\n\nA thing that converts musical patterns into a whole bunch of image formats following Rosa Menkman's vernacular of File Formats\n\n\nmap of a filesystem based on change and relation - a way to document my PhD?\n\n\nA really cool project idea is to smash through all unicode as fast as possible, or make some kind of piece of work around it. Scrolling unicode characters look absolutely great.\n\n\nopen sourcing and changing. Not often done by the people who participate in art, so maybe some kind of art operating system? one that auto-commits to git once it has been modified by a person?\n    - this could ask people to create their own experience and also maybe create things from experiences that have already taken place, but that could be in a nice abstract kind of way?\n    - some kind of collective experience enabled through version control?\n    - examining principles of open source(ry) through the fundamental parts of the work?    \n\n\n\n\n\n\nA work that is a gallery of images that you download and run, and when it is run, you make an image and as a result of making that image some aspect of the work is deleted?\n\n\n\n\n\n\nA web browser addon that makes websites physically uncomfortable to use the more they monitor you\n\n\n\n\n\n\nAn autonomous music piece based around some kind of biological or computational principle. Game of life music would probably be the simplest implementation of this kind of idea\n\n\n\n\n\n\na la Cardew - get an AI to make it's own form of notation which it then obeys to make a composition in SuperCollider based on the notation that it creates?\n\n\n\n\n\n\ntrain a neural network to say free software bullshit and then release it as free software\n\n\n\n\n\n\nA direct sonification of harassment tweets directed against marginalised communities in tech. Literally aplay *.txt - harassment as 'background noise of the internet'\n\n\n\n\n\n\nAn induction mic sonification of an abused thinkpad which is turned into messages somehow. Like the cry of the computer? Something like that.\n\n\n\n\n\n\nAbsurdist small sonic and visual patterns based on Magno's Screenbashing performance\n\n\n\n\n\n\nA soelnoid-driven Arduino algorithmic player which algorithmically samples an object to algorithmically create 'object studies' in TidalCycles. This could all be done on raspberry pi maybe.\n\n\n\n\n\n\nLavarand\n - A material/digital linkup used in random number generation\n\n\n\n\n\n\nHedy Lamarr and George Antheil and frequency-hopping.\n\n\n\n\n\n\nWhat does free software mean?\n\n\n\n\n\n\nThe autonomous forest. I can't remember what it is called, but maybe some kind of autonomous syntheizer generation?\n\n\n\n\n\n\nMore things to do with chaos theory and chaos synths, taking 'Chaotic Map in curved waves' as an example.\n\n\n\n\n\n\nLive code for literally the entire day\n\n\n\n\n\n\nDouble/triple pendulum sonification\n\n\n\n\n\n\nLightification and patterns. Tidal DMX and lighting\n\n\n\n\n\n\nThe Pasmore work was great, why? And how to take it forward?\n\n\n\n\n\n\nField Recording and working with field recording, I haven't done enough of this lately.\n\n\n\n\n\n\nThe work of Zimoun, micro-macro synthesis, applied to music\n\n\n\n\n\n\nMusic with Serial - Raspberry Pi/Arduino Random Synth? This could feed into the 'small patterns' thing, sonification and display of small patterns. Display of patterns as random garbage.\n\n\n\n\n\n\nRaw data through file formats is a thing I keep thinking about. How to articulate this in a project\n\n\n\n\n\n\nPatents, copyright and data: The continual copying of that Gnarls Barkley song into /dev/null is a nice touch.\n\n\n\n\n\n\nA work about the reliance of artists on Apple technology. Talk of 'openness' when using these systems is something that's still absurd\n\n\n\n\n\n\nAn album that is my hard drive tree encoded for a bunch of different audio formats!\n\n\n\n\n\n\nA smartphone that is a brick. A brick that communicates to a whole bunch of APIs by arbitrary calls based on accelerometer data.\n\n\nBrickternate reality - a brick that you put on your face where you can see through the holes and in the holes are beautiful descriptions from VC firms of what alternate reality is, accompanied by a dreadful binaural soundscape of absolutely nofhing.\n\n\nFrom Tom:\n\n\n\n\npackets time browsers phenomena\n\n\nreading and re-reading\n\n\nhack materials (a hack based on the ingredients of a \u2018successful\u2019 hack e.g. pizza, mentors, sponsors, prizes, competition)", 
            "title": "List of ideas/topics/themes"
        }, 
        {
            "location": "/license/", 
            "text": "[ Copyleft Attitude ]\n\n\nFree Art License 1.3 (FAL 1.3)\n\n\nPreamble\n\n\nThe Free Art License grants the right to freely copy, distribute, and transform creative works without infringing the author\u2019s rights.\n\n\nThe Free Art License recognizes and protects these rights. Their implementation has been reformulated in order to allow everyone to use creations of the human mind in a creative manner, regardless of their types and ways of expression.\n\n\nWhile the public\u2019s access to creations of the human mind usually is restricted by the implementation of copyright law, it is favoured by the Free Art License. This license intends to allow the use of a work\u2019s resources; to establish new conditions for creating in order to increase creation opportunities. The Free Art License grants the right to use a work, and acknowledges the right holder\u2019s and the user\u2019s rights and responsibility.\n\n\nThe invention and development of digital technologies, Internet and Free Software have changed creation methods: creations of the human mind can obviously be distributed, exchanged, and transformed. They allow to produce common works to which everyone can contribute to the benefit of all.\n\n\nThe main rationale for this Free Art License is to promote and protect these creations of the human mind according to the principles of copyleft: freedom to use, copy, distribute, transform, and prohibition of exclusive appropriation.\n\n\nDefinitions\n\n\n\u00ab work \u00bb\u009d either means the initial work, the subsequent works or the common work as defined hereafter:\n\n\n\u00ab common work \u00bb\u009d means a work composed of the initial work and all subsequent contributions to it (originals and copies). The initial author is the one who, by choosing this license, defines the conditions under which contributions are made.\n\n\n\u00ab Initial work \u00bb\u009d means the work created by the initiator of the common work (as defined above), the copies of which can be modified by whoever wants to\n\n\n\u00ab Subsequent works \u00bb\u009d means the contributions made by authors who participate in the evolution of the common work by exercising the rights to reproduce, distribute, and modify that are granted by the license.\n\n\n\u00ab Originals \u00bb (sources or resources of the work) means all copies of either the initial work or any subsequent work mentioning a date and used by their author(s) as references for any subsequent updates, interpretations, copies or reproductions.\n\n\n\u00ab Copy \u00bb\u009d means any reproduction of an original as defined by this license.\n\n\n\n\n\n\nOBJECT \nThe aim of this license is to define the conditions under which one can use this work freely.\n\n\n\n\n\n\nSCOPE \nThis work is subject to copyright law. Through this license its author specifies the extent to which you can copy, distribute, and modify it.\n\n\n\n\n\n\n2.1 FREEDOM TO COPY (OR TO MAKE REPRODUCTIONS) \nYou have the right to copy this work for yourself, your friends or any other person, whatever the technique used.\n\n\n2.2 FREEDOM TO DISTRIBUTE, TO PERFORM IN PUBLIC \nYou have the right to distribute copies of this work; whether modified or not, whatever the medium and the place, with or without any charge, provided that you:\nattach this license without any modification to the copies of this work or indicate precisely where the license can be found,\nspecify to the recipient the names of the author(s) of the originals, including yours if you have modified the work,\nspecify to the recipient where to access the originals (either initial or subsequent).\nThe authors of the originals may, if they wish to, give you the right to distribute the originals under the same conditions as the copies.\n\n\n2.3 FREEDOM TO MODIFY \nYou have the right to modify copies of the originals (whether initial or subsequent) provided you comply with the following conditions:\nall conditions in article 2.2 above, if you distribute modified copies;\nindicate that the work has been modified and, if it is possible, what kind of modifications have been made;\ndistribute the subsequent work under the same license or any compatible license.\nThe author(s) of the original work may give you the right to modify it under the same conditions as the copies.\n\n\n\n\n\n\nRELATED RIGHTS \nActivities giving rise to author\u2019s rights and related rights shall not challenge the rights granted by this license.\nFor example, this is the reason why performances must be subject to the same license or a compatible license. Similarly, integrating the work in a database, a compilation or an anthology shall not prevent anyone from using the work under the same conditions as those defined in this license.\n\n\n\n\n\n\nINCORPORATION OF THE WORK \nIncorporating this work into a larger work that is not subject to the Free Art License shall not challenge the rights granted by this license.\nIf the work can no longer be accessed apart from the larger work in which it is incorporated, then incorporation shall only be allowed under the condition that the larger work is subject either to the Free Art License or a compatible license.\n\n\n\n\n\n\nCOMPATIBILITY \nA license is compatible with the Free Art License provided:\nit gives the right to copy, distribute, and modify copies of the work including for commercial purposes and without any other restrictions than those required by the respect of the other compatibility criteria;\nit ensures proper attribution of the work to its authors and access to previous versions of the work when possible;\nit recognizes the Free Art License as compatible (reciprocity);\nit requires that changes made to the work be subject to the same license or to a license which also meets these compatibility criteria.\n\n\n\n\n\n\nYOUR INTELLECTUAL RIGHTS \nThis license does not aim at denying your author\u2019s rights in your contribution or any related right. By choosing to contribute to the development of this common work, you only agree to grant others the same rights with regard to your contribution as those you were granted by this license. Conferring these rights does not mean you have to give up your intellectual rights.\n\n\n\n\n\n\nYOUR RESPONSIBILITIES \nThe freedom to use the work as defined by the Free Art License (right to copy, distribute, modify) implies that everyone is responsible for their own actions.\n\n\n\n\n\n\nDURATION OF THE LICENSE \nThis license takes effect as of your acceptance of its terms. The act of copying, distributing, or modifying the work constitutes a tacit agreement. This license will remain in effect for as long as the copyright which is attached to the work. If you do not respect the terms of this license, you automatically lose the rights that it confers.\nIf the legal status or legislation to which you are subject makes it impossible for you to respect the terms of this license, you may not make use of the rights which it confers.\n\n\n\n\n\n\nVARIOUS VERSIONS OF THE LICENSE \nThis license may undergo periodic modifications to incorporate improvements by its authors (instigators of the \u00ab Copyleft Attitude \u00bb\u009d movement) by way of new, numbered versions.\nYou will always have the choice of accepting the terms contained in the version under which the copy of the work was distributed to you, or alternatively, to use the provisions of one of the subsequent versions.\n\n\n\n\n\n\nSUB-LICENSING \nSub-licenses are not authorized by this license. Any person wishing to make use of the rights that it confers will be directly bound to the authors of the common work.\n\n\n\n\n\n\nLEGAL FRAMEWORK\nThis license is written with respect to both French law and the Berne Convention for the Protection of Literary and Artistic Works.\n\n\n\n\n\n\nUSER GUIDE\n\n\n\u2013 How to use the Free Art License? \nTo benefit from the Free Art License, you only need to mention the following elements on your work:\n[Name of the author, title, date of the work. When applicable, names of authors of the common work and, if possible, where to find the originals].\nCopyleft: This is a free work, you can copy, distribute, and modify it under the terms of the Free Art License http://artlibre.org/licence/lal/en/\n\n\n\u2013 Why to use the Free Art License? \n1.To give the greatest number of people access to your work.\n2.To allow it to be distributed freely.\n3.To allow it to evolve by allowing its copy, distribution, and transformation by others.\n4.So that you benefit from the resources of a work when it is under the Free Art License: to be able to copy, distribute or transform it freely.\n5.But also, because the Free Art License offers a legal framework to disallow any misappropriation. It is forbidden to take hold of your work and bypass the creative process for one\u2019s exclusive possession.\n\n\n\u2013 When to use the Free Art License? \nAny time you want to benefit and make others benefit from the right to copy, distribute and transform creative works without any exclusive appropriation, you should use the Free Art License. You can for example use it for scientific, artistic or educational projects.\n\n\n\u2013 What kinds of works can be subject to the Free Art License? \nThe Free Art License can be applied to digital as well as physical works.\nYou can choose to apply the Free Art License on any text, picture, sound, gesture, or whatever sort of stuff on which you have sufficient author\u2019s rights.\n\n\n\u2013 Historical background of this license: \nIt is the result of observing, using and creating digital technologies, free software, the Internet and art. It arose from the \u00ab Copyleft Attitude \u00bb\u009d meetings which took place in Paris in 2000. For the first time, these meetings brought together members of the Free Software community, artists, and members of the art world. The goal was to adapt the principles of Copyleft and free software to all sorts of creations. http://www.artlibre.org\n\n\nCopyleft Attitude, 2007.\nYou can make reproductions and distribute this license verbatim (without any changes).\n\n\nTranslation : Jonathan Clarke, Benjamin Jean, Griselda Jung, Fanny Mourguet, Antoine Pitrou.\nThanks to framalang.org", 
            "title": "License"
        }, 
        {
            "location": "/hack1/", 
            "text": "Hackpact Day 1 - 'Sonic Pattern'\n\n\nDocumentation\n\n\n\n\n\nhack1\n from \nSean Cotterill\n on \nVimeo\n.\n\n\n\nNotes\n\n\nInspired by '\nScreenbashing\n', a performance by Magno I saw at ICLC 2016.\n\n\nScreenbashing writes a series of simple C programs in transparent terminals which display repeated symbol patterns.\n\n\nIt's then backed up by a bunch of (what I assume are) Viznut-style \n'Single line of C'\n programs implemented in SuperCollider.\n\n\nWhat I'd like to do is more of these very small text repetition pieces, maybe in Python, and implement them in a way that will feed them directly to a sound card if possible, and then maybe extend that to some OSC or something like that, and maybe make some nice thing out of that.\n\n\nThis ties in nicely to a thing i've been wanting to tackle ages which is 'assigning messages as they come in' - i.e. a colour is assigned to a symbol when a symbol is sent to processing, and the colour for that symbol is kept constant. A simple thing that I've never actually done before.\n\n\nI'm going to start with the simple 'C' programs though. I'm going to do them in Python because that provides more flexibility later and I also don't really know my C too well...\n\n\nA thing to 'send it directly to sound card' could be something like \naplay\n or \nsox\n\n\naplay -v -f cd *\n is a nice format for CD-quality raw audio\n\n\nTends to come out as gated white noise, when given a few reasonably large example files\n\n\nStarting with the python script to make repeated patterns, python's \nprint\n puts a newline at the end of everything, so i'm going to use \nsys.stdout.write\n (https://stackoverflow.com/questions/11266068/python-avoid-new-line-with-print-command)\n\n\nIt needs a very small sleep at the end otherwise it just spams printing in a way that's slightly unproductive\n\n\nAccording to the original \nviznut blog post\n, the audio was being written as 'raw PCM audio' to the sound card.\n\n\nThis is done in C by writing to the sound card, i can just pipe it to \naplay\n\n\npython 01_repeatingFigures.py | aplay\n\n\nvarious options sound differently in various ways\n\n\nI'd also like to view the output too... The issue is that the pipe only feeds to aplay. Need to pipe this in parallel.\n\n\nUsing \ntee\n does a version of it (https://stackoverflow.com/questions/5677201/how-to-pipe-stdout-while-keeping-it-on-screen-and-not-to-a-output-file), but there's quite a delay during it.\n\n\nAlso, after putting a \ntime.sleep\n in the Python script i've now realised that sys.stdout.write doesn't work in conjunction with \nsys.stdout.write\n, why?\n\n\nit's also not a problem with piping to \n/dev/tty\n as \n/dev/stderr\n does the same thing.\n\n\nI'm also not flushing after writing to \nstdout\n which is an issue (https://stackoverflow.com/questions/2808832/problems-with-sys-stdout-write-with-time-sleep-in-a-function)\n\n\nWith all of that corrected, and a sleep added, playback through both sound and terminal is still a little bit jumpy.\n\n\nThe sound from the terminal output is also super static. Literally just a tone. That's not the most entertaining thing in the whole world\n\n\nA repeated string of \n'string'\n produces the sound found in \n01_string.wav\n\n\nLet's try shuffling the string around and seeing if it mixes things up? This is a pre-done thing https://stackoverflow.com/questions/6181304/are-there-any-way-to-scramble-strings-in-python\n\n\nIt just makes noise! Interestingw\nIf you add a bunch of spaces it adds silences but the silences are so small that it just kinda filters the sound??! this can be hear in \n02_stringspace.wav\n\n\nThe issue with continuous sound and printing is in the amount of data that is flowing. If i cut down the string size and massively up the sample rate, both are constant(ish)\n\n\nThis produces disappointing results.\n\n\nMaybe to better drive the point home the terminal printing and aplay sound be independent of one another. This would involve some kind of process separation or something\n\n\nOr maybe I need \naplay\n as a sort of subprocess.\n\n\nA simple way to do this would be to start two versions of the same script in parallel. One that writes to the terminal and one that is piped to \naplay\n, but i don't know how to do this...\n\n\npython script.py \n python script.py | aplay\n\n\nworks, but it doesn't make the two scripts work in a way that they \nactually\n work from the same output. oh, and it makes them very hard to terminate\n\n\nAn interesting answer on stackoverflow here (https://stackoverflow.com/questions/260738/play-audio-with-python) says something about playing numpy arrays. i'll try\n\n\nDoesn't work because it is not a numpy array, and thinking about it there is no reason why this \nwould\n work.\n\n\nNeed to do this double-piping thing. Just not sure to make it work.\n\n\nOne way to do it would be to have a python script that recieves strings by OSC at a particular address with a listener. Then I can use the piping arrangement with two scripts running at the same time, that doesn't seem right. What I need is to run a shell \ninside\n of python...\n\n\nDoesn't seem right, but it could be. Time to make a send script and a receive script.\n\n\nI need to:\n- Get the OSC Responder script\n- Wire that script up to the inside of the printing script\n- Test that in the context of the \naplay\n piping option and the terminal output.\n\n\nOSC Responder occupies a port and they can't be co-occupied\n\n\nthis is a problem.\n\n\nSet up an OSC responder script alongside the piping I tried earlier, and it seems to work nicely.\n\n\nA continuous input on the input script would be really nice.\n\n\nOverall this just produces a series of boring beeps.\n\n\nActually a pretty dull result.\n\n\nStart two terminal windows in the \nPython\n directory\n\n\nin one: \npython 03_1_OSCSender.py\n\n\nIn the other: \npython 03_OSCHandler | tee /dev/tty | aplay -f cd\n\n\nEnjoy the DC Bias and bleeps.", 
            "title": "Hack 1: Sonic Pattern"
        }, 
        {
            "location": "/hack1/#hackpact-day-1-sonic-pattern", 
            "text": "", 
            "title": "Hackpact Day 1 - 'Sonic Pattern'"
        }, 
        {
            "location": "/hack1/#documentation", 
            "text": "hack1  from  Sean Cotterill  on  Vimeo .", 
            "title": "Documentation"
        }, 
        {
            "location": "/hack1/#notes", 
            "text": "Inspired by ' Screenbashing ', a performance by Magno I saw at ICLC 2016.  Screenbashing writes a series of simple C programs in transparent terminals which display repeated symbol patterns.  It's then backed up by a bunch of (what I assume are) Viznut-style  'Single line of C'  programs implemented in SuperCollider.  What I'd like to do is more of these very small text repetition pieces, maybe in Python, and implement them in a way that will feed them directly to a sound card if possible, and then maybe extend that to some OSC or something like that, and maybe make some nice thing out of that.  This ties in nicely to a thing i've been wanting to tackle ages which is 'assigning messages as they come in' - i.e. a colour is assigned to a symbol when a symbol is sent to processing, and the colour for that symbol is kept constant. A simple thing that I've never actually done before.  I'm going to start with the simple 'C' programs though. I'm going to do them in Python because that provides more flexibility later and I also don't really know my C too well...  A thing to 'send it directly to sound card' could be something like  aplay  or  sox  aplay -v -f cd *  is a nice format for CD-quality raw audio  Tends to come out as gated white noise, when given a few reasonably large example files  Starting with the python script to make repeated patterns, python's  print  puts a newline at the end of everything, so i'm going to use  sys.stdout.write  (https://stackoverflow.com/questions/11266068/python-avoid-new-line-with-print-command)  It needs a very small sleep at the end otherwise it just spams printing in a way that's slightly unproductive  According to the original  viznut blog post , the audio was being written as 'raw PCM audio' to the sound card.  This is done in C by writing to the sound card, i can just pipe it to  aplay  python 01_repeatingFigures.py | aplay  various options sound differently in various ways  I'd also like to view the output too... The issue is that the pipe only feeds to aplay. Need to pipe this in parallel.  Using  tee  does a version of it (https://stackoverflow.com/questions/5677201/how-to-pipe-stdout-while-keeping-it-on-screen-and-not-to-a-output-file), but there's quite a delay during it.  Also, after putting a  time.sleep  in the Python script i've now realised that sys.stdout.write doesn't work in conjunction with  sys.stdout.write , why?  it's also not a problem with piping to  /dev/tty  as  /dev/stderr  does the same thing.  I'm also not flushing after writing to  stdout  which is an issue (https://stackoverflow.com/questions/2808832/problems-with-sys-stdout-write-with-time-sleep-in-a-function)  With all of that corrected, and a sleep added, playback through both sound and terminal is still a little bit jumpy.  The sound from the terminal output is also super static. Literally just a tone. That's not the most entertaining thing in the whole world  A repeated string of  'string'  produces the sound found in  01_string.wav  Let's try shuffling the string around and seeing if it mixes things up? This is a pre-done thing https://stackoverflow.com/questions/6181304/are-there-any-way-to-scramble-strings-in-python  It just makes noise! Interestingw\nIf you add a bunch of spaces it adds silences but the silences are so small that it just kinda filters the sound??! this can be hear in  02_stringspace.wav  The issue with continuous sound and printing is in the amount of data that is flowing. If i cut down the string size and massively up the sample rate, both are constant(ish)  This produces disappointing results.  Maybe to better drive the point home the terminal printing and aplay sound be independent of one another. This would involve some kind of process separation or something  Or maybe I need  aplay  as a sort of subprocess.  A simple way to do this would be to start two versions of the same script in parallel. One that writes to the terminal and one that is piped to  aplay , but i don't know how to do this...  python script.py   python script.py | aplay  works, but it doesn't make the two scripts work in a way that they  actually  work from the same output. oh, and it makes them very hard to terminate  An interesting answer on stackoverflow here (https://stackoverflow.com/questions/260738/play-audio-with-python) says something about playing numpy arrays. i'll try  Doesn't work because it is not a numpy array, and thinking about it there is no reason why this  would  work.  Need to do this double-piping thing. Just not sure to make it work.  One way to do it would be to have a python script that recieves strings by OSC at a particular address with a listener. Then I can use the piping arrangement with two scripts running at the same time, that doesn't seem right. What I need is to run a shell  inside  of python...  Doesn't seem right, but it could be. Time to make a send script and a receive script.  I need to:\n- Get the OSC Responder script\n- Wire that script up to the inside of the printing script\n- Test that in the context of the  aplay  piping option and the terminal output.  OSC Responder occupies a port and they can't be co-occupied  this is a problem.  Set up an OSC responder script alongside the piping I tried earlier, and it seems to work nicely.  A continuous input on the input script would be really nice.  Overall this just produces a series of boring beeps.  Actually a pretty dull result.  Start two terminal windows in the  Python  directory  in one:  python 03_1_OSCSender.py  In the other:  python 03_OSCHandler | tee /dev/tty | aplay -f cd  Enjoy the DC Bias and bleeps.", 
            "title": "Notes"
        }
    ]
}